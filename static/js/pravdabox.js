// Generated by CoffeeScript 1.12.3
var P,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

P = window.P || {};

P.ws_endpoint = 'ws://' + location.host + '/ws-bin';

P.max_lines = 20;

P.howmanycolors = 7;

P.dns = function() {
  var c, ws;
  ws = new WebSocket(P.ws_endpoint + '/dns');
  c = 0;
  return ws.onmessage = function(event) {
    var address, j, len, line, ref;
    line = P.colorize(event.data);
    if (P.dns_add(line)) {
      $('.filter-dns .filterwindow').html('');
      c = 0;
      ref = P.dns_bin;
      for (j = 0, len = ref.length; j < len; j++) {
        address = ref[j];
        $('<div class="l l-' + c + '">' + address + '</div>').appendTo('.filter-dns .filterwindow');
        c++;
      }
      return P.scroller('dns');
    }
  };
};

P.dns_bin = [];

P.dns_add = function(address) {
  if (indexOf.call(P.dns_bin, address) < 0) {
    P.dns_bin.push(address);
    if (P.dns_bin.length > P.max_lines) {
      P.dns_bin.shift();
    }
    return true;
  }
  return false;
};

P.connections = function() {
  var ws;
  ws = new WebSocket(P.ws_endpoint + '/connections');
  return ws.onmessage = function(event) {
    var c, connection, j, len, line, ref;
    line = P.colorize(event.data);
    if (P.connections_add(line)) {
      $('.filter-connections .filterwindow').html('');
      c = 0;
      ref = P.connections_bin;
      for (j = 0, len = ref.length; j < len; j++) {
        connection = ref[j];
        $('<div class="l l-' + c + '">' + connection + '</div>').appendTo('.filter-connections .filterwindow');
        c++;
      }
      return P.scroller('connections');
    }
  };
};

P.connections_bin = [];

P.connections_add = function(connection) {
  if (indexOf.call(P.connections_bin, connection) < 0) {
    P.connections_bin.push(connection);
    if (P.connections_bin.length > P.max_lines) {
      P.connections_bin.shift();
    }
    return true;
  }
  return false;
};

P.forms = function() {
  var ws;
  ws = new WebSocket(P.ws_endpoint + '/forms');
  return ws.onmessage = function(event) {
    var c, form, j, len, line, ref;
    line = event.data;
    line = P.parse_formdata(line);
    line = P.colorize(line);
    if (P.forms_add(line)) {
      $('.filter-forms .filterwindow').html('');
      c = 0;
      ref = P.forms_bin;
      for (j = 0, len = ref.length; j < len; j++) {
        form = ref[j];
        $('<div class="l l-' + c + '">' + form + '</div>').appendTo('.filter-forms .filterwindow');
        c++;
      }
      return P.scroller('forms');
    }
  };
};

P.forms_bin = [];

P.forms_add = function(form) {
  if (indexOf.call(P.forms_bin, form) < 0) {
    P.forms_bin.push(form);
    if (P.forms_bin.length > P.max_lines) {
      P.forms_bin.shift();
    }
    return true;
  }
  return false;
};

P.parse_formdata = function(data) {
  var f, form, i, ip, j, key, keys, len, values;
  ip = data.split('\t')[0];
  keys = data.split('\t')[1].split(',');
  values = data.split('\t')[2].split(',');
  f = [];
  i = 0;
  for (j = 0, len = keys.length; j < len; j++) {
    key = keys[j];
    f.push(keys[i] + ': ' + values[i]);
    i++;
  }
  form = ip + '\t' + f.join(', ');
  return form;
};

P.cookies = function() {
  var ws;
  ws = new WebSocket(P.ws_endpoint + '/cookies');
  return ws.onmessage = function(event) {
    var c, cookie, j, len, line, ref;
    line = P.colorize(event.data);
    if (P.cookies_add(line)) {
      $('.filter-cookies .filterwindow').html('');
      c = 0;
      ref = P.cookies_bin;
      for (j = 0, len = ref.length; j < len; j++) {
        cookie = ref[j];
        $('<div class="l l-' + c + '">' + cookie + '</div>').appendTo('.filter-cookies .filterwindow');
        c++;
      }
      return P.scroller('cookies');
    }
  };
};

P.cookies_bin = [];

P.cookies_add = function(cookie) {
  if (indexOf.call(P.cookies_bin, cookie) < 0) {
    P.cookies_bin.push(cookie);
    if (P.cookies_bin.length > P.max_lines) {
      P.cookies_bin.shift();
    }
    return true;
  }
  return false;
};

P.images = function() {
  var c, ws;
  ws = new WebSocket(P.ws_endpoint + '/images');
  c = 0;
  return ws.onmessage = function(event) {
    $('<a href="/image/' + event.data + '" target="_blank"><img class="i i-' + c + '" src="/image/' + event.data + '"></a>').prependTo('.filter-images .filterwindow');
    if ($('.filter-images .i').length > P.max_lines) {
      $('.filter-images .i-' + (c - P.max_lines)).remove();
    }
    P.scroller('images');
    return c++;
  };
};

P.scroller = function(filter) {
  return $('.filter-' + filter + ' .filterwindow').animate({
    scrollTop: 10000
  }, 1);
};

P.colorize = function(block_with_ip) {
  var hueval, ip;
  block_with_ip = block_with_ip.replace('192.168.23.', '');
  try {
    ip = parseInt(block_with_ip.split('\t')[0], 10);
  } catch (error) {
    ip = 0;
  }
  ip = ip - 2;
  ip = ip % P.howmanycolors;
  hueval = Math.round(ip / P.howmanycolors * 360);
  block_with_ip = '<span style="color: hsl(' + hueval + ', 100%, 80%);">' + block_with_ip + '</span>';
  return block_with_ip;
};

$(function() {
  P.dns();
  P.connections();
  P.forms();
  P.cookies();
  return P.images();
});
