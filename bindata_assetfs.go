// Code generated by go-bindata.
// sources:
// static/css/bootstrap-responsive.css
// static/css/bootstrap-responsive.min.css
// static/css/bootstrap.css
// static/css/bootstrap.min.css
// static/css/fonts/Fixedsys500c.eot
// static/css/fonts/Fixedsys500c.otf
// static/css/fonts/Fixedsys500c.svg
// static/css/fonts/Fixedsys500c.ttf
// static/css/fonts/Fixedsys500c.woff
// static/css/pravdabox.css
// static/img/glyphicons-halflings-white.png
// static/img/glyphicons-halflings.png
// static/index.html
// static/js/Makefile
// static/js/bootstrap.js
// static/js/bootstrap.min.js
// static/js/jquery.js
// static/js/pravdabox.coffee
// static/js/pravdabox.js
// DO NOT EDIT!

package main

import (
	"net/http"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// staticCssBootstrapResponsiveCss reads file data from disk. It returns an error on failure.
func staticCssBootstrapResponsiveCss() (*asset, error) {
	path := "/home/longneck/webinterface/static/css/bootstrap-responsive.css"
	name := "static/css/bootstrap-responsive.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssBootstrapResponsiveMinCss reads file data from disk. It returns an error on failure.
func staticCssBootstrapResponsiveMinCss() (*asset, error) {
	path := "/home/longneck/webinterface/static/css/bootstrap-responsive.min.css"
	name := "static/css/bootstrap-responsive.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssBootstrapCss reads file data from disk. It returns an error on failure.
func staticCssBootstrapCss() (*asset, error) {
	path := "/home/longneck/webinterface/static/css/bootstrap.css"
	name := "static/css/bootstrap.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssBootstrapMinCss reads file data from disk. It returns an error on failure.
func staticCssBootstrapMinCss() (*asset, error) {
	path := "/home/longneck/webinterface/static/css/bootstrap.min.css"
	name := "static/css/bootstrap.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssFontsFixedsys500cEot reads file data from disk. It returns an error on failure.
func staticCssFontsFixedsys500cEot() (*asset, error) {
	path := "/home/longneck/webinterface/static/css/fonts/Fixedsys500c.eot"
	name := "static/css/fonts/Fixedsys500c.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssFontsFixedsys500cOtf reads file data from disk. It returns an error on failure.
func staticCssFontsFixedsys500cOtf() (*asset, error) {
	path := "/home/longneck/webinterface/static/css/fonts/Fixedsys500c.otf"
	name := "static/css/fonts/Fixedsys500c.otf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssFontsFixedsys500cSvg reads file data from disk. It returns an error on failure.
func staticCssFontsFixedsys500cSvg() (*asset, error) {
	path := "/home/longneck/webinterface/static/css/fonts/Fixedsys500c.svg"
	name := "static/css/fonts/Fixedsys500c.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssFontsFixedsys500cTtf reads file data from disk. It returns an error on failure.
func staticCssFontsFixedsys500cTtf() (*asset, error) {
	path := "/home/longneck/webinterface/static/css/fonts/Fixedsys500c.ttf"
	name := "static/css/fonts/Fixedsys500c.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssFontsFixedsys500cWoff reads file data from disk. It returns an error on failure.
func staticCssFontsFixedsys500cWoff() (*asset, error) {
	path := "/home/longneck/webinterface/static/css/fonts/Fixedsys500c.woff"
	name := "static/css/fonts/Fixedsys500c.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssPravdaboxCss reads file data from disk. It returns an error on failure.
func staticCssPravdaboxCss() (*asset, error) {
	path := "/home/longneck/webinterface/static/css/pravdabox.css"
	name := "static/css/pravdabox.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgGlyphiconsHalflingsWhitePng reads file data from disk. It returns an error on failure.
func staticImgGlyphiconsHalflingsWhitePng() (*asset, error) {
	path := "/home/longneck/webinterface/static/img/glyphicons-halflings-white.png"
	name := "static/img/glyphicons-halflings-white.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgGlyphiconsHalflingsPng reads file data from disk. It returns an error on failure.
func staticImgGlyphiconsHalflingsPng() (*asset, error) {
	path := "/home/longneck/webinterface/static/img/glyphicons-halflings.png"
	name := "static/img/glyphicons-halflings.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticIndexHtml reads file data from disk. It returns an error on failure.
func staticIndexHtml() (*asset, error) {
	path := "/home/longneck/webinterface/static/index.html"
	name := "static/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsMakefile reads file data from disk. It returns an error on failure.
func staticJsMakefile() (*asset, error) {
	path := "/home/longneck/webinterface/static/js/Makefile"
	name := "static/js/Makefile"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapJs() (*asset, error) {
	path := "/home/longneck/webinterface/static/js/bootstrap.js"
	name := "static/js/bootstrap.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBootstrapMinJs reads file data from disk. It returns an error on failure.
func staticJsBootstrapMinJs() (*asset, error) {
	path := "/home/longneck/webinterface/static/js/bootstrap.min.js"
	name := "static/js/bootstrap.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJqueryJs reads file data from disk. It returns an error on failure.
func staticJsJqueryJs() (*asset, error) {
	path := "/home/longneck/webinterface/static/js/jquery.js"
	name := "static/js/jquery.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsPravdaboxCoffee reads file data from disk. It returns an error on failure.
func staticJsPravdaboxCoffee() (*asset, error) {
	path := "/home/longneck/webinterface/static/js/pravdabox.coffee"
	name := "static/js/pravdabox.coffee"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsPravdaboxJs reads file data from disk. It returns an error on failure.
func staticJsPravdaboxJs() (*asset, error) {
	path := "/home/longneck/webinterface/static/js/pravdabox.js"
	name := "static/js/pravdabox.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/css/bootstrap-responsive.css": staticCssBootstrapResponsiveCss,
	"static/css/bootstrap-responsive.min.css": staticCssBootstrapResponsiveMinCss,
	"static/css/bootstrap.css": staticCssBootstrapCss,
	"static/css/bootstrap.min.css": staticCssBootstrapMinCss,
	"static/css/fonts/Fixedsys500c.eot": staticCssFontsFixedsys500cEot,
	"static/css/fonts/Fixedsys500c.otf": staticCssFontsFixedsys500cOtf,
	"static/css/fonts/Fixedsys500c.svg": staticCssFontsFixedsys500cSvg,
	"static/css/fonts/Fixedsys500c.ttf": staticCssFontsFixedsys500cTtf,
	"static/css/fonts/Fixedsys500c.woff": staticCssFontsFixedsys500cWoff,
	"static/css/pravdabox.css": staticCssPravdaboxCss,
	"static/img/glyphicons-halflings-white.png": staticImgGlyphiconsHalflingsWhitePng,
	"static/img/glyphicons-halflings.png": staticImgGlyphiconsHalflingsPng,
	"static/index.html": staticIndexHtml,
	"static/js/Makefile": staticJsMakefile,
	"static/js/bootstrap.js": staticJsBootstrapJs,
	"static/js/bootstrap.min.js": staticJsBootstrapMinJs,
	"static/js/jquery.js": staticJsJqueryJs,
	"static/js/pravdabox.coffee": staticJsPravdaboxCoffee,
	"static/js/pravdabox.js": staticJsPravdaboxJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"bootstrap-responsive.css": &bintree{staticCssBootstrapResponsiveCss, map[string]*bintree{}},
			"bootstrap-responsive.min.css": &bintree{staticCssBootstrapResponsiveMinCss, map[string]*bintree{}},
			"bootstrap.css": &bintree{staticCssBootstrapCss, map[string]*bintree{}},
			"bootstrap.min.css": &bintree{staticCssBootstrapMinCss, map[string]*bintree{}},
			"fonts": &bintree{nil, map[string]*bintree{
				"Fixedsys500c.eot": &bintree{staticCssFontsFixedsys500cEot, map[string]*bintree{}},
				"Fixedsys500c.otf": &bintree{staticCssFontsFixedsys500cOtf, map[string]*bintree{}},
				"Fixedsys500c.svg": &bintree{staticCssFontsFixedsys500cSvg, map[string]*bintree{}},
				"Fixedsys500c.ttf": &bintree{staticCssFontsFixedsys500cTtf, map[string]*bintree{}},
				"Fixedsys500c.woff": &bintree{staticCssFontsFixedsys500cWoff, map[string]*bintree{}},
			}},
			"pravdabox.css": &bintree{staticCssPravdaboxCss, map[string]*bintree{}},
		}},
		"img": &bintree{nil, map[string]*bintree{
			"glyphicons-halflings-white.png": &bintree{staticImgGlyphiconsHalflingsWhitePng, map[string]*bintree{}},
			"glyphicons-halflings.png": &bintree{staticImgGlyphiconsHalflingsPng, map[string]*bintree{}},
		}},
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"Makefile": &bintree{staticJsMakefile, map[string]*bintree{}},
			"bootstrap.js": &bintree{staticJsBootstrapJs, map[string]*bintree{}},
			"bootstrap.min.js": &bintree{staticJsBootstrapMinJs, map[string]*bintree{}},
			"jquery.js": &bintree{staticJsJqueryJs, map[string]*bintree{}},
			"pravdabox.coffee": &bintree{staticJsPravdaboxCoffee, map[string]*bintree{}},
			"pravdabox.js": &bintree{staticJsPravdaboxJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() http.FileSystem {
	for k := range _bintree.Children {
		return http.Dir(k)
	}
	panic("unreachable")
}
